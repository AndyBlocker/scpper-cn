generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnalysisWatermark {
  id        Int       @id @default(autoincrement())
  task      String    @unique
  lastRunAt DateTime  @default(now()) @db.Timestamp(6)
  cursorTs  DateTime? @db.Timestamp(6)
}

model Attribution {
  id          Int         @id @default(autoincrement())
  pageVerId   Int
  type        String
  order       Int         @default(0)
  date        DateTime?
  userId      Int?
  anonKey     String?
  PageVersion PageVersion @relation(fields: [pageVerId], references: [id])
  User        User?       @relation(fields: [userId], references: [id])

  @@unique([pageVerId, type, order, anonKey])
  @@unique([pageVerId, type, order, userId])
  @@index([pageVerId])
  @@index([userId])
  @@index([pageVerId, date], map: "idx_attr_pagever_date")
  @@index([userId], map: "idx_attr_user")
}

model ContentRecords {
  id            Int      @id @default(autoincrement())
  recordType    String
  pageId        Int
  pageTitle     String?
  sourceLength  Int?
  contentLength Int?
  complexity    Json?
  calculatedAt  DateTime @default(now())
  Page          Page     @relation(fields: [pageId], references: [id])

  @@unique([recordType, pageId])
  @@index([recordType])
  @@index([sourceLength])
}

model DirtyPage {
  pageId     Int      @id
  needPhaseB Boolean
  needPhaseC Boolean
  reasons    String[]
  donePhaseB Boolean  @default(false)
  donePhaseC Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([needPhaseB, donePhaseB])
  @@index([needPhaseC, donePhaseC])
}

model DirtyPageBackup {
  pageId      Int?
  needPhaseB  Boolean?
  needPhaseC  Boolean?
  reasons     String[]
  donePhaseB  Boolean?
  donePhaseC  Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  url         String?
  backup_time DateTime?
  id          Int       @id @default(autoincrement())
}

model InterestingFacts {
  id           Int       @id @default(autoincrement())
  category     String
  type         String
  title        String
  description  String?
  value        String?
  metadata     Json?
  pageId       Int?
  userId       Int?
  dateContext  DateTime? @db.Date
  tagContext   String?
  rank         Int       @default(1)
  calculatedAt DateTime  @default(now())
  isActive     Boolean   @default(true)
  Page         Page?     @relation(fields: [pageId], references: [id])
  User         User?     @relation(fields: [userId], references: [id])

  @@unique([category, type, dateContext, tagContext, rank])
  @@index([calculatedAt])
  @@index([category, type])
  @@index([isActive])
}

model LeaderboardCache {
  id        Int       @id @default(autoincrement())
  key       String
  period    String
  payload   Json
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  expiresAt DateTime? @db.Timestamp(6)

  @@unique([key, period])
}

model Page {
  id               Int                @id @default(autoincrement())
  url              String             @unique
  urlKey           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  pageUuid         String?
  historicalUrls   String[]
  firstPublishedAt DateTime?          @db.Timestamp(6)
  votingTimeSeriesCache Json?
  votingCacheUpdatedAt DateTime?
  ContentRecords   ContentRecords[]
  DirtyPage        DirtyPage?
  InterestingFacts InterestingFacts[]
  PageDailyStats   PageDailyStats[]
  PageVersion      PageVersion[]
  RatingRecords    RatingRecords[]
  SearchIndex      SearchIndex?
  TagRecords       TagRecords[]
  TimeMilestones   TimeMilestones[]

  @@index([firstPublishedAt], map: "idx_page_first_published")
  @@index([votingCacheUpdatedAt])
}

model PageDailyStats {
  id            Int       @id @default(autoincrement())
  pageId        Int
  date          DateTime  @db.Date
  votes_up      Int?      @default(0)
  votes_down    Int?      @default(0)
  total_votes   Int?      @default(0)
  unique_voters Int?      @default(0)
  revisions     Int?      @default(0)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  Page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pagedailystats_page")

  @@unique([pageId, date])
}

model PageMetaStaging {
  url              String   @id
  wikidotId        Int?
  title            String?
  rating           Int?
  voteCount        Int?
  revisionCount    Int?
  tags             String[]
  isDeleted        Boolean  @default(false)
  estimatedCost    Int?
  lastSeenAt       DateTime @default(now())
  category         String?
  parentUrl        String?
  childCount       Int?
  attributionCount Int?
  voteUp           Int?
  voteDown         Int?

  @@index([lastSeenAt])
}

model PageStats {
  id            Int         @id @default(autoincrement())
  pageVersionId Int         @unique
  uv            Int
  dv            Int
  wilson95      Float
  controversy   Float
  likeRatio     Float
  PageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
}

model PageVersion {
  id            Int           @id @default(autoincrement())
  pageId        Int
  wikidotId     Int?
  title         String?
  rating        Int?
  voteCount     Int?
  revisionCount Int?
  textContent   String?
  source        String?
  tags          String[]
  validFrom     DateTime
  validTo       DateTime?
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Attribution   Attribution[]
  PageStats     PageStats?
  Page          Page          @relation(fields: [pageId], references: [id])
  Revision      Revision[]
  Vote          Vote[]

  @@index([pageId])
  @@index([rating])
  @@index([validTo])
  @@index([wikidotId])
  @@index([tags], map: "idx_pv_tags_gin", type: Gin)
}

model RatingRecords {
  id           Int       @id @default(autoincrement())
  recordType   String
  pageId       Int
  pageTitle    String?
  rating       Int?
  voteCount    Int?
  controversy  Float?
  wilson95     Float?
  timeframe    String?
  value        Decimal?
  achievedAt   DateTime?
  calculatedAt DateTime  @default(now())
  Page         Page      @relation(fields: [pageId], references: [id])

  @@unique([recordType, timeframe, pageId])
  @@index([rating])
  @@index([recordType, timeframe])
}

model Revision {
  id            Int         @id @default(autoincrement())
  pageVersionId Int
  wikidotId     Int
  timestamp     DateTime
  type          String
  comment       String?
  userId        Int?
  PageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
  User          User?       @relation(fields: [userId], references: [id])

  @@unique([pageVersionId, wikidotId])
  @@index([pageVersionId])
  @@index([pageVersionId, timestamp])
  @@index([timestamp])
  @@index([userId])
  @@index([pageVersionId, timestamp], map: "idx_rev_pv_ts")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model SearchIndex {
  pageId           Int      @id
  title            String?
  url              String?
  tags             String[]
  textContent      String?  @map("text_content")
  sourceContent    String?  @map("source_content")
  searchVector     String?  @map("search_vector") // tsvector stored as text for Prisma compatibility
  randomSentences  String[] @map("random_sentences")
  contentStats     Json?    @map("content_stats")
  updatedAt        DateTime @default(now())
  page             Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model SeriesStats {
  id              Int      @id @default(autoincrement())
  seriesNumber    Int      @unique
  isOpen          Boolean  @default(false)
  totalSlots      Int
  usedSlots       Int      @default(0)
  usagePercentage Float    @default(0.0)
  milestonePageId Int?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([isOpen])
  @@index([seriesNumber])
  @@index([usagePercentage])
}

model SiteStats {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique @db.Date
  totalUsers    Int      @default(0)
  activeUsers   Int      @default(0)
  totalPages    Int      @default(0)
  totalVotes    Int      @default(0)
  newUsersToday Int      @default(0)
  newPagesToday Int      @default(0)
  newVotesToday Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  @@index([date])
}

model SourceVersion {
  id             Int      @id @default(autoincrement())
  pageVersionId  Int
  revisionId     Int?
  revisionNumber Int?
  source         String?
  textContent    String?
  timestamp      DateTime @default(now())
  isLatest       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime

  @@unique([pageVersionId, revisionNumber])
  @@index([pageVersionId, isLatest])
  @@index([pageVersionId, timestamp])
  @@index([revisionNumber])
  @@index([timestamp])
}

model TagRecords {
  id           Int      @id @default(autoincrement())
  tag          String
  recordType   String
  pageId       Int?
  userId       Int?
  value        Decimal?
  metadata     Json?
  calculatedAt DateTime @default(now())
  Page         Page?    @relation(fields: [pageId], references: [id])
  User         User?    @relation(fields: [userId], references: [id])

  @@unique([tag, recordType])
  @@index([recordType])
  @@index([tag])
}

model TimeMilestones {
  id            Int       @id @default(autoincrement())
  period        String
  periodValue   String
  milestoneType String
  pageId        Int
  pageTitle     String?
  pageRating    Int?
  pageCreatedAt DateTime?
  calculatedAt  DateTime  @default(now())
  Page          Page      @relation(fields: [pageId], references: [id])

  @@unique([period, periodValue, milestoneType])
  @@index([milestoneType])
  @@index([period, periodValue])
}

model TrendingStats {
  id           Int      @id @default(autoincrement())
  statType     String
  name         String
  entityId     Int?
  entityType   String?
  score        Decimal
  period       String
  metadata     Json?
  calculatedAt DateTime @default(now())

  @@unique([statType, period, entityId, entityType])
  @@index([score])
  @@index([statType, period])
}

model User {
  id                   Int                   @id @default(autoincrement())
  wikidotId            Int?                  @unique
  displayName          String?
  firstActivityAt      DateTime?
  firstActivityType    String?
  firstActivityDetails String?
  lastActivityAt       DateTime?
  attributionVotingTimeSeriesCache Json?
  attributionVotingCacheUpdatedAt  DateTime?
  Attribution          Attribution[]
  InterestingFacts     InterestingFacts[]
  Revision             Revision[]
  TagRecords           TagRecords[]
  UserActivityRecords  UserActivityRecords[]
  UserDailyStats       UserDailyStats[]
  UserStats            UserStats?
  Vote                 Vote[]

  @@index([firstActivityAt])
  @@index([firstActivityType])
  @@index([lastActivityAt])
  @@index([attributionVotingCacheUpdatedAt])
  @@index([firstActivityAt, lastActivityAt], map: "idx_user_first_last")
}

model UserActivityRecords {
  id              Int       @id @default(autoincrement())
  recordType      String
  userId          Int
  userDisplayName String?
  value           Decimal?
  achievedAt      DateTime?
  context         Json?
  calculatedAt    DateTime  @default(now())
  User            User      @relation(fields: [userId], references: [id])

  @@unique([recordType, userId])
  @@index([achievedAt])
  @@index([recordType])
}

model UserDailyStats {
  id            Int       @id @default(autoincrement())
  userId        Int
  date          DateTime  @db.Date
  votes_cast    Int?      @default(0)
  pages_created Int?      @default(0)
  last_activity DateTime? @db.Timestamp(6)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_userdailystats_user")

  @@unique([userId, date])
}

model UserStats {
  id                   Int       @id @default(autoincrement())
  userId               Int       @unique
  totalUp              Int
  totalDown            Int
  totalRating          Int
  favTag               String?
  goiPageCount         Int       @default(0)
  goiRank              Int?
  goiRating            Decimal?  @default(0) @db.Decimal(10, 2)
  overallRank          Int?
  overallRating        Decimal?  @default(0) @db.Decimal(10, 2)
  pageCount            Int       @default(0)
  ratingUpdatedAt      DateTime? @default(now())
  scpPageCount         Int       @default(0)
  scpRank              Int?
  scpRating            Decimal?  @default(0) @db.Decimal(10, 2)
  storyPageCount       Int       @default(0)
  storyRank            Int?
  storyRating          Decimal?  @default(0) @db.Decimal(10, 2)
  translationPageCount Int       @default(0)
  translationRank      Int?
  translationRating    Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRating      Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRank        Int?
  wanderersPageCount   Int       @default(0)
  artRating            Decimal?  @default(0) @db.Decimal(10, 2)
  artRank              Int?
  artPageCount         Int       @default(0)
  User                 User      @relation(fields: [userId], references: [id])

  @@index([artRank])
  @@index([artRating(sort: Desc)])
  @@index([goiRank])
  @@index([goiRating(sort: Desc)])
  @@index([overallRank])
  @@index([overallRating(sort: Desc)])
  @@index([scpRank])
  @@index([scpRating(sort: Desc)])
  @@index([storyRank])
  @@index([storyRating(sort: Desc)])
  @@index([translationRank])
  @@index([translationRating(sort: Desc)])
  @@index([wanderersRank])
  @@index([wanderersRating(sort: Desc)])
  @@index([goiRank], map: "idx_userstats_goi_rank")
  @@index([goiRating(sort: Desc)], map: "idx_userstats_goi_rating")
  @@index([overallRank], map: "idx_userstats_overall_rank")
  @@index([overallRating(sort: Desc)], map: "idx_userstats_overall_rating")
  @@index([scpRank], map: "idx_userstats_scp_rank")
  @@index([scpRating(sort: Desc)], map: "idx_userstats_scp_rating")
  @@index([storyRank], map: "idx_userstats_story_rank")
  @@index([storyRating(sort: Desc)], map: "idx_userstats_story_rating")
  @@index([translationRank], map: "idx_userstats_translation_rank")
  @@index([translationRating(sort: Desc)], map: "idx_userstats_translation_rating")
}

model UserTagPreference {
  userId        Int
  tag           String
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  id            Int       @id @default(autoincrement())

  @@unique([userId, tag])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model UserVoteInteraction {
  fromUserId    Int
  toUserId      Int
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  id            Int       @id @default(autoincrement())

  @@unique([fromUserId, toUserId])
}

model Vote {
  id            Int         @id @default(autoincrement())
  pageVersionId Int
  timestamp     DateTime
  direction     Int
  userId        Int?
  anonKey       String?
  PageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
  User          User?       @relation(fields: [userId], references: [id])

  @@unique([pageVersionId, anonKey, timestamp])
  @@unique([pageVersionId, userId, timestamp])
  @@index([pageVersionId, direction])
  @@index([pageVersionId, timestamp])
  @@index([userId])
  @@index([pageVersionId, direction, timestamp], map: "idx_vote_pv_dir_ts")
  @@index([pageVersionId, timestamp], map: "idx_vote_pv_ts")
}
