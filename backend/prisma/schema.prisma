generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attribution {
  id        Int      @id @default(autoincrement())
  pageVerId Int
  type      String
  order     Int      @default(0)
  date      DateTime?
  userId    Int?
  anonKey   String?

  pageVersion PageVersion @relation(fields: [pageVerId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@unique([pageVerId, type, order, userId], name: "Attribution_unique_constraint") 
  @@unique([pageVerId, type, order, anonKey], name: "Attribution_anon_unique_constraint")
  @@index([pageVerId])
  @@index([userId])
}

model DirtyPage {
  pageId     Int      @id
  needPhaseB Boolean
  needPhaseC Boolean
  reasons    String[]
  donePhaseB Boolean  @default(false)
  donePhaseC Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([needPhaseB, donePhaseB])
  @@index([needPhaseC, donePhaseC])
}

model DirtyPageBackup {
  pageId      Int?
  needPhaseB  Boolean?
  needPhaseC  Boolean?
  reasons     String[]
  donePhaseB  Boolean?
  donePhaseC  Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  url         String?
  backup_time DateTime?
  id          Int       @id @default(autoincrement())
}

model Page {
  id               Int                   @id @default(autoincrement())
  url              String                @unique
  urlKey           String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  firstPublishedAt DateTime?             // 标准化的页面创建时间
  pageUuid         String?
  historicalUrls   String[]
  dirtyPage        DirtyPage?
  versions         PageVersion[]
  searchIndex      SearchIndex?
  interestingFacts InterestingFacts[]
  timeMilestones   TimeMilestones[]
  tagRecords       TagRecords[]
  contentRecords   ContentRecords[]
  ratingRecords    RatingRecords[]
  pageDailyStats   PageDailyStats[]

  @@index([firstPublishedAt])
}

model PageMetaStaging {
  url              String   @id
  wikidotId        Int?
  title            String?
  rating           Int?
  voteCount        Int?
  revisionCount    Int?
  tags             String[]
  isDeleted        Boolean  @default(false)
  estimatedCost    Int?
  lastSeenAt       DateTime @default(now())
  category         String?
  parentUrl        String?
  childCount       Int?
  attributionCount Int?
  voteUp           Int?
  voteDown         Int?

  @@index([lastSeenAt])
}

model PageStats {
  id              Int   @id @default(autoincrement())
  pageVersionId   Int   @unique
  uv              Int
  dv              Int
  wilson95        Float
  controversy     Float
  likeRatio       Float
  
  pageVersion     PageVersion @relation(fields: [pageVersionId], references: [id])
}

model PageVersion {
  id            Int           @id @default(autoincrement())
  pageId        Int
  wikidotId     Int?
  title         String?
  rating        Int?
  voteCount     Int?
  revisionCount Int?
  textContent   String?
  source        String?
  tags          String[]
  validFrom     DateTime
  validTo       DateTime?
  isDeleted     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  attributions  Attribution[]
  stats         PageStats?
  page          Page          @relation(fields: [pageId], references: [id])
  revisions     Revision[]
  votes         Vote[]

  @@index([pageId])
  @@index([rating])
  @@index([validTo])
  @@index([wikidotId])
}

model Revision {
  id            Int         @id @default(autoincrement())
  pageVersionId Int
  wikidotId     Int
  timestamp     DateTime
  type          String
  comment       String?
  userId        Int?
  pageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])

  @@unique([pageVersionId, wikidotId])
  @@index([pageVersionId])
  @@index([pageVersionId, timestamp])
  @@index([userId])
  @@index([timestamp])
}

model SeriesStats {
  id              Int      @id @default(autoincrement())
  seriesNumber    Int      @unique
  isOpen          Boolean  @default(false)
  totalSlots      Int
  usedSlots       Int      @default(0)
  usagePercentage Float    @default(0.0)
  milestonePageId Int?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([isOpen])
  @@index([seriesNumber])
  @@index([usagePercentage])
}

model SiteStats {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique @db.Date
  totalUsers  Int      @default(0)
  activeUsers Int      @default(0)  // Users with firstActivityAt
  totalPages  Int      @default(0)
  totalVotes  Int      @default(0)
  newUsersToday Int    @default(0)  // New users by firstActivityAt on this date
  newPagesToday Int    @default(0)  // New pages created on this date
  newVotesToday Int    @default(0)  // New votes on this date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date])
}

model SourceVersion {
  id             Int      @id @default(autoincrement())
  pageVersionId  Int
  revisionId     Int?
  revisionNumber Int?
  source         String?
  textContent    String?
  timestamp      DateTime @default(now())
  isLatest       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([pageVersionId, revisionNumber])
  @@index([pageVersionId, isLatest])
  @@index([pageVersionId, timestamp])
  @@index([revisionNumber])
  @@index([timestamp])
}

model User {
  id                   Int                   @id @default(autoincrement())
  wikidotId            Int?                  @unique
  displayName          String?
  firstActivityAt      DateTime?
  firstActivityType    String?
  firstActivityDetails String?
  lastActivityAt       DateTime?
  attributions         Attribution[]
  revisions            Revision[]
  stats                UserStats?
  votes                Vote[]
  interestingFacts     InterestingFacts[]
  tagRecords           TagRecords[]
  userActivityRecords  UserActivityRecords[]
  userDailyStats       UserDailyStats[]

  @@index([firstActivityAt])
  @@index([firstActivityType])
  @@index([lastActivityAt])
}

model UserStats {
  id                   Int       @id @default(autoincrement())
  userId               Int       @unique
  totalUp              Int
  totalDown            Int
  totalRating          Int
  favTag               String?
  goiPageCount         Int       @default(0)
  goiRank              Int?
  goiRating            Decimal?  @default(0) @db.Decimal(10, 2)
  overallRank          Int?
  overallRating        Decimal?  @default(0) @db.Decimal(10, 2)
  pageCount            Int       @default(0)
  ratingUpdatedAt      DateTime? @default(now())
  scpPageCount         Int       @default(0)
  scpRank              Int?
  scpRating            Decimal?  @default(0) @db.Decimal(10, 2)
  storyPageCount       Int       @default(0)
  storyRank            Int?
  storyRating          Decimal?  @default(0) @db.Decimal(10, 2)
  translationPageCount Int       @default(0)
  translationRank      Int?
  translationRating    Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRating      Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRank        Int?
  wanderersPageCount   Int       @default(0)
  artRating            Decimal?  @default(0) @db.Decimal(10, 2)
  artRank              Int?
  artPageCount         Int       @default(0)
  user                 User      @relation(fields: [userId], references: [id])

  @@index([overallRating(sort: Desc)], map: "idx_userstats_overall_rating")
  @@index([overallRank], map: "idx_userstats_overall_rank")
  @@index([scpRating(sort: Desc)], map: "idx_userstats_scp_rating")
  @@index([scpRank], map: "idx_userstats_scp_rank")
  @@index([translationRating(sort: Desc)], map: "idx_userstats_translation_rating")
  @@index([translationRank], map: "idx_userstats_translation_rank")
  @@index([goiRating(sort: Desc)], map: "idx_userstats_goi_rating")
  @@index([goiRank], map: "idx_userstats_goi_rank")
  @@index([storyRating(sort: Desc)], map: "idx_userstats_story_rating")
  @@index([storyRank], map: "idx_userstats_story_rank")
  @@index([wanderersRating(sort: Desc)], map: "idx_userstats_wanderers_rating")
  @@index([wanderersRank], map: "idx_userstats_wanderers_rank")
  @@index([artRating(sort: Desc)], map: "idx_userstats_art_rating")
  @@index([artRank], map: "idx_userstats_art_rank")
}

model UserTagPreference {
  userId        Int
  tag           String
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())

  @@unique([userId, tag])
}

model UserVoteInteraction {
  fromUserId    Int
  toUserId      Int
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())

  @@unique([fromUserId, toUserId])
}

model Vote {
  id            Int            @id @default(autoincrement())
  pageVersionId Int
  timestamp     DateTime
  direction     Int
  userId        Int?
  anonKey       String?        // For anonymous votes when userId is null
  
  pageVersion   PageVersion    @relation(fields: [pageVersionId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  
  // Fixed unique constraint that handles NULL userId properly
  @@unique([pageVersionId, userId, timestamp], name: "Vote_unique_constraint")
  @@unique([pageVersionId, anonKey, timestamp], name: "Vote_anon_unique_constraint")
  @@index([pageVersionId, direction])
  @@index([pageVersionId, timestamp])
  @@index([userId])
}

// 有趣统计信息相关表

model InterestingFacts {
  id           Int       @id @default(autoincrement())
  category     String    // time_milestone, tag_record, content_length, rating_record, user_activity
  type         String    // first_page_of_year, highest_rated_in_tag, longest_source 等
  title        String    // 显示标题
  description  String?   // 详细描述
  value        String?   // 统计值（可能是数字、日期、文本）
  metadata     Json?     // 额外元数据
  pageId       Int?      // 相关页面ID
  userId       Int?      // 相关用户ID
  dateContext  DateTime? @db.Date  // 时间上下文（如某年某月）
  tagContext   String?   // 标签上下文
  rank         Int       @default(1)  // 排名（支持Top N）
  calculatedAt DateTime  @default(now())
  isActive     Boolean   @default(true)  // 是否仍然有效

  page         Page?     @relation(fields: [pageId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@unique([category, type, dateContext, tagContext, rank])
  @@index([category, type])
  @@index([calculatedAt])
  @@index([isActive])
}

model TimeMilestones {
  id             Int      @id @default(autoincrement())
  period         String   // year, month, quarter, day
  periodValue    String   // 2024, 2024-01, 2024-Q1, 01-15
  milestoneType  String   // first_page, last_page, first_high_rated
  pageId         Int
  pageTitle      String?
  pageRating     Int?
  pageCreatedAt  DateTime?
  calculatedAt   DateTime @default(now())

  page           Page     @relation(fields: [pageId], references: [id])

  @@unique([period, periodValue, milestoneType])
  @@index([period, periodValue])
  @@index([milestoneType])
}

model TagRecords {
  id           Int       @id @default(autoincrement())
  tag          String
  recordType   String    // highest_rated, first_page, most_popular, most_controversial
  pageId       Int?
  userId       Int?
  value        Decimal?  // 评分、数量等数值
  metadata     Json?     // 其他相关数据
  calculatedAt DateTime  @default(now())

  page         Page?     @relation(fields: [pageId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@unique([tag, recordType])
  @@index([tag])
  @@index([recordType])
}

model ContentRecords {
  id            Int      @id @default(autoincrement())
  recordType    String   // longest_source, shortest_source, most_complex
  pageId        Int
  pageTitle     String?
  sourceLength  Int?     // 源代码长度
  contentLength Int?     // 渲染内容长度
  complexity    Json?    // 复杂度指标
  calculatedAt  DateTime @default(now())

  page          Page     @relation(fields: [pageId], references: [id])

  @@unique([recordType, pageId])
  @@index([recordType])
  @@index([sourceLength])
}

model RatingRecords {
  id           Int       @id @default(autoincrement())
  recordType   String    // highest_rated, most_votes, most_controversial, fastest_growth
  pageId       Int
  pageTitle    String?
  rating       Int?
  voteCount    Int?
  controversy  Float?
  wilson95     Float?
  timeframe    String?   // 24h, 7d, 30d, all_time
  value        Decimal?  // 记录的具体数值
  achievedAt   DateTime?
  calculatedAt DateTime  @default(now())

  page         Page      @relation(fields: [pageId], references: [id])

  @@unique([recordType, timeframe, pageId])
  @@index([recordType, timeframe])
  @@index([rating])
}

model UserActivityRecords {
  id              Int       @id @default(autoincrement())
  recordType      String    // first_vote, first_page, longest_streak, most_votes_single_day
  userId          Int
  userDisplayName String?
  value           Decimal?  // 记录数值（天数、次数等）
  achievedAt      DateTime?
  context         Json?     // 上下文信息
  calculatedAt    DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id])

  @@unique([recordType, userId])
  @@index([recordType])
  @@index([achievedAt])
}

model TrendingStats {
  id           Int      @id @default(autoincrement())
  statType     String   // hot_tag, active_user, trending_page
  name         String   // 标签名、用户名、页面标题
  entityId     Int?     // 关联实体ID
  entityType   String?  // tag, user, page
  score        Decimal  // 热度分数
  period       String   // today, this_week, this_month
  metadata     Json?    // 额外数据
  calculatedAt DateTime @default(now())

  @@unique([statType, period, entityId, entityType])
  @@index([statType, period])
  @@index([score])
}

// ======================
// 新增模型：增量分析和搜索功能
// ======================

model AnalysisWatermark {
  id        Int      @id @default(autoincrement())
  task      String   @unique
  lastRunAt DateTime @default(now())
  cursorTs  DateTime?
}

model SearchIndex {
  pageId        Int      @id
  title         String?
  url           String?
  tags          String[]
  textContent   String?  @map("text_content")
  sourceContent String?  @map("source_content")
  updatedAt     DateTime @default(now())
  page          Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model PageDailyStats {
  id            Int      @id @default(autoincrement())
  pageId        Int
  date          DateTime @db.Date
  votesUp       Int      @default(0) @map("votes_up")
  votesDown     Int      @default(0) @map("votes_down")
  totalVotes    Int      @default(0) @map("total_votes")
  uniqueVoters  Int      @default(0) @map("unique_voters")
  revisions     Int      @default(0)
  createdAt     DateTime @default(now())
  
  page          Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, date])
  @@index([date])
  @@index([pageId])
}

model UserDailyStats {
  id           Int       @id @default(autoincrement())
  userId       Int
  date         DateTime  @db.Date
  votesCast    Int       @default(0) @map("votes_cast")
  pagesCreated Int       @default(0) @map("pages_created")
  lastActivity DateTime? @map("last_activity")
  createdAt    DateTime  @default(now())
  
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
  @@index([userId])
}

model LeaderboardCache {
  id        Int       @id @default(autoincrement())
  key       String
  period    String
  payload   Json
  updatedAt DateTime  @default(now())
  expiresAt DateTime?

  @@unique([key, period])
  @@index([key, period])
  @@index([expiresAt])
}

