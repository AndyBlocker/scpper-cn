// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Page {
  url            String   @id @db.VarChar(500)
  title          String?
  wikidotId      Int?     @map("wikidot_id")
  category       String?  @db.VarChar(100)
  rating         Int?
  voteCount      Int?     @map("vote_count")
  realtimeRating Int?     @map("realtime_rating")
  realtimeVoteCount Int?  @map("realtime_vote_count")
  commentCount   Int?     @map("comment_count")
  createdAt      DateTime? @map("created_at")
  revisionCount  Int?     @map("revision_count")
  source         String?
  textContent    String?  @map("text_content")
  tags           Json?
  isPrivate      Boolean  @default(false) @map("is_private")
  isDeleted      Boolean  @default(false) @map("is_deleted")
  deletedAt      DateTime? @map("deleted_at")  // 删除时间
  deletionReason String?  @map("deletion_reason") @db.VarChar(500) // 删除原因
  createdByUser  String?  @map("created_by_user") @db.VarChar(100)
  parentUrl      String?  @map("parent_url") @db.VarChar(500)
  thumbnailUrl   String?  @map("thumbnail_url")
  lastSyncedAt   DateTime @default(now()) @map("last_synced_at")
  lastRevisionCount Int?  @map("last_revision_count") // 用于检测内容变化

  // Relations
  voteRecords    VoteRecord[]
  revisions      Revision[]
  pageHistories  PageHistory[]  // 页面历史版本
  relations      PageRelation[] @relation("PageRelations")
  reverseRelations PageRelation[] @relation("ReversePageRelations")
  attributions   Attribution[]
  alternateTitles AlternateTitle[]

  @@index([rating])
  @@index([createdAt])
  @@index([isDeleted])
  @@index([deletedAt])
  @@index([createdByUser])
  @@index([lastRevisionCount])
  @@index([lastSyncedAt])
  @@map("pages")
}

model User {
  name              String  @id @db.VarChar(100)
  displayName       String? @map("display_name") @db.VarChar(100)
  wikidotId         Int?    @unique @map("wikidot_id")
  unixName          String? @map("unix_name") @db.VarChar(100)
  rank              Int?
  totalRating       Int?    @map("total_rating")
  meanRating        Float?  @map("mean_rating")
  pageCount         Int?    @map("page_count")
  pageCountScp      Int?    @map("page_count_scp")
  pageCountTale     Int?    @map("page_count_tale")
  pageCountGoiFormat Int?   @map("page_count_goi_format")
  pageCountArtwork  Int?    @map("page_count_artwork")
  pageCountLevel    Int?    @map("page_count_level")
  pageCountEntity   Int?    @map("page_count_entity")
  pageCountObject   Int?    @map("page_count_object")
  lastSyncedAt      DateTime @default(now()) @map("last_synced_at")

  // Relations
  attributions   Attribution[]

  @@index([rank])
  @@index([totalRating])
  @@map("users")
}

model VoteRecord {
  id            Int      @id @default(autoincrement())
  pageUrl       String   @map("page_url") @db.VarChar(500)
  userWikidotId Int      @map("user_wikidot_id")
  userName      String?  @map("user_name") @db.VarChar(100)
  timestamp     DateTime
  direction     Int      @db.SmallInt

  page Page @relation(fields: [pageUrl], references: [url], onDelete: Cascade)

  @@unique([pageUrl, userWikidotId, timestamp])
  @@index([userWikidotId])
  @@index([timestamp])
  @@index([pageUrl, timestamp])
  @@map("vote_records")
}

model Revision {
  id            Int      @id @default(autoincrement())
  pageUrl       String   @map("page_url") @db.VarChar(500)
  revisionIndex Int      @map("revision_index")
  wikidotId     Int?     @map("wikidot_id")
  timestamp     DateTime
  type          String?  @db.VarChar(50)
  userWikidotId Int?     @map("user_wikidot_id")
  userName      String?  @map("user_name") @db.VarChar(100)
  comment       String?

  page Page @relation(fields: [pageUrl], references: [url], onDelete: Cascade)

  @@unique([pageUrl, revisionIndex])
  @@index([timestamp])
  @@index([userWikidotId])
  @@map("revisions")
}

model PageRelation {
  pageUrl      String @map("page_url") @db.VarChar(500)
  relatedUrl   String @map("related_url") @db.VarChar(500)
  relationType String @map("relation_type") @db.VarChar(20)

  page Page @relation("PageRelations", fields: [pageUrl], references: [url], onDelete: Cascade)
  relatedPage Page? @relation("ReversePageRelations", fields: [relatedUrl], references: [url], onDelete: Cascade)

  @@id([pageUrl, relatedUrl, relationType])
  @@index([relationType])
  @@map("page_relations")
}

model Attribution {
  pageUrl         String   @map("page_url") @db.VarChar(500)
  userName        String   @map("user_name") @db.VarChar(100)
  attributionType String   @map("attribution_type") @db.VarChar(20)
  date            DateTime?
  orderIndex      Int?     @map("order_index")
  isCurrent       Boolean? @map("is_current")

  page Page @relation(fields: [pageUrl], references: [url], onDelete: Cascade)
  user User? @relation(fields: [userName], references: [name], onDelete: SetNull)

  @@id([pageUrl, userName, attributionType])
  @@index([userName])
  @@index([attributionType])
  @@map("attributions")
}

model AlternateTitle {
  id       Int    @id @default(autoincrement())
  pageUrl  String @map("page_url") @db.VarChar(500)
  type     String @db.VarChar(50)
  title    String

  page Page @relation(fields: [pageUrl], references: [url], onDelete: Cascade)

  @@index([pageUrl])
  @@map("alternate_titles")
}

// 页面历史版本表 - 基于revision信息追踪页面变更历史
model PageHistory {
  id              Int      @id @default(autoincrement())
  pageUrl         String   @map("page_url") @db.VarChar(500)
  versionNumber   Int      @map("version_number") // 版本号，递增
  capturedAt      DateTime @map("captured_at") @default(now()) // 记录时间
  
  // 页面基本信息快照
  title           String?
  
  // 页面元数据快照
  rating          Int?
  voteCount       Int?     @map("vote_count")
  commentCount    Int?     @map("comment_count")
  revisionCount   Int?     @map("revision_count") // 用于检测内容变化
  tags            Json?
  
  // 变更信息
  changeType      String   @map("change_type") @db.VarChar(20) // 'created', 'updated', 'deleted'
  changeReason    String?  @map("change_reason") @db.VarChar(500) // 变更原因
  
  page Page @relation(fields: [pageUrl], references: [url], onDelete: Cascade)

  @@unique([pageUrl, versionNumber])
  @@index([pageUrl, capturedAt])
  @@index([capturedAt])
  @@index([changeType])
  @@index([revisionCount]) // 用于检测revision变化
  @@map("page_histories")
}

model SyncLog {
  id          Int      @id @default(autoincrement())
  syncType    String   @map("sync_type") @db.VarChar(50) // 'full', 'incremental', 'users'
  startedAt   DateTime @map("started_at") @default(now())
  completedAt DateTime? @map("completed_at")
  status      String   @db.VarChar(20) // 'running', 'completed', 'failed'
  pagesProcessed Int?  @map("pages_processed")
  usersProcessed Int?  @map("users_processed")
  errors      Json?    // Store error details
  summary     Json?    // Store sync summary

  @@index([syncType, startedAt])
  @@map("sync_logs")
}