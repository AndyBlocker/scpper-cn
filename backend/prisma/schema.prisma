generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgroonga]
}

enum PageVersionImageStatus {
  PENDING
  QUEUED
  FETCHING
  RESOLVED
  FAILED
}

enum ImageAssetStatus {
  PENDING
  FETCHING
  READY
  FAILED
}

enum ImageIngestJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PageMetricType {
  COMMENT_COUNT
  VOTE_COUNT
  RATING
  REVISION_COUNT
  SCORE
}

enum PageMetricThresholdType {
  ANY_CHANGE
  ABSOLUTE
  PERCENT
}

model Attribution {
  id          Int         @id @default(autoincrement())
  pageVerId   Int
  type        String
  order       Int         @default(0)
  date        DateTime?
  userId      Int?
  anonKey     String?
  pageVersion PageVersion @relation(fields: [pageVerId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@unique([pageVerId, type, order, userId], name: "Attribution_unique_constraint")
  @@unique([pageVerId, type, order, anonKey], name: "Attribution_anon_unique_constraint")
  @@index([pageVerId])
  @@index([userId], map: "idx_attr_user")
}

model DirtyPage {
  id         Int      @id @default(autoincrement())
  pageId     Int?
  wikidotId  Int?
  stagingUrl String?
  needPhaseB Boolean
  needPhaseC Boolean
  reasons    String[]
  donePhaseB Boolean  @default(false)
  donePhaseC Boolean  @default(false)
  detectedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  page       Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([wikidotId])
  @@index([needPhaseB, donePhaseB])
  @@index([needPhaseC, donePhaseC])
}

model DirtyPageBackup {
  pageId      Int?
  needPhaseB  Boolean?
  needPhaseC  Boolean?
  reasons     String[]
  donePhaseB  Boolean?
  donePhaseC  Boolean?
  createdAt   DateTime?
  updatedAt   DateTime?
  url         String?
  backup_time DateTime?
  id          Int       @id @default(autoincrement())
}

model Page {
  id                    Int                @id @default(autoincrement())
  wikidotId             Int                @unique
  url                   String
  currentUrl            String
  urlHistory            String[]           @default([])
  isDeleted             Boolean            @default(false)
  firstPublishedAt      DateTime?
  votingTimeSeriesCache Json?
  votingCacheUpdatedAt  DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  contentRecords        ContentRecords[]
  dirtyPages            DirtyPage[]
  interestingFacts      InterestingFacts[]
  pageDailyStats        PageDailyStats[]
  versions              PageVersion[]
  ratingRecords         RatingRecords[]
  tagRecords            TagRecords[]
  timeMilestones        TimeMilestones[]
  metricWatches         PageMetricWatch[]
  metricAlerts          PageMetricAlert[]

  @@index([currentUrl])
  @@index([isDeleted])
  @@index([firstPublishedAt])
  @@index([votingCacheUpdatedAt])
}

model PageMetaStaging {
  wikidotId        Int      @id
  url              String
  title            String?
  rating           Int?
  voteCount        Int?
  revisionCount    Int?
  commentCount     Int?
  tags             String[]
  isDeleted        Boolean  @default(false)
  estimatedCost    Int?
  lastSeenAt       DateTime @default(now())
  category         String?
  parentUrl        String?
  childCount       Int?
  attributionCount Int?
  voteUp           Int?
  voteDown         Int?

  @@index([url])
  @@index([lastSeenAt])
}

model PageStats {
  id            Int         @id @default(autoincrement())
  pageVersionId Int         @unique
  uv            Int
  dv            Int
  wilson95      Float
  controversy   Float
  likeRatio     Float
  pageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
}

model PageVersion {
  id               Int             @id @default(autoincrement())
  pageId           Int
  wikidotId        Int?
  title            String?
  rating           Int?
  voteCount        Int?
  revisionCount    Int?
  commentCount     Int?
  textContent      String?
  source           String?
  tags             String[]
  validFrom        DateTime
  validTo          DateTime?
  isDeleted        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  category         String?
  alternateTitle   String?
  attributionCount Int?
  attributions     Attribution[]
  stats            PageStats?
  page             Page            @relation(fields: [pageId], references: [id])
  revisions        Revision[]
  sourceVersions   SourceVersion[]
  votes            Vote[]
  images           PageVersionImage[]

  @@index([pageId])
  @@index([rating])
  @@index([validTo])
  @@index([wikidotId])
}

model ImageAsset {
  id             Int                  @id @default(autoincrement())
  hashSha256     String?              @unique
  perceptualHash String?
  mimeType       String?
  width          Int?
  height         Int?
  bytes          Int?
  storagePath    String?
  canonicalUrl   String?
  sourceHosts    String[]             @default([])
  status         ImageAssetStatus     @default(PENDING)
  firstSeenAt    DateTime             @default(now())
  lastFetchedAt  DateTime?
  errorMessage   String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  images         PageVersionImage[]
}

model PageVersionImage {
  id               Int                    @id @default(autoincrement())
  pageVersionId    Int
  originUrl        String
  normalizedUrl    String
  displayUrl       String?
  status           PageVersionImageStatus @default(PENDING)
  imageAssetId     Int?
  extractedAt      DateTime               @default(now())
  lastQueuedAt     DateTime?
  lastFetchedAt    DateTime?
  failureCount     Int                    @default(0)
  lastError        String?
  metadata         Json?
  pageVersion      PageVersion            @relation(fields: [pageVersionId], references: [id], onDelete: Cascade)
  imageAsset       ImageAsset?            @relation(fields: [imageAssetId], references: [id])
  ingestJob        ImageIngestJob?          @relation("ImageIngestJobForImage")

  @@unique([pageVersionId, normalizedUrl])
  @@index([status])
  @@index([imageAssetId])
}

model ImageIngestJob {
  id                  Int                 @id @default(autoincrement())
  pageVersionImageId  Int                 @unique
  status              ImageIngestJobStatus @default(PENDING)
  priority            Int                 @default(100)
  attempts            Int                 @default(0)
  nextRunAt           DateTime            @default(now())
  lockedAt            DateTime?
  lockedBy            String?
  lastError           String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  pageVersionImage    PageVersionImage    @relation("ImageIngestJobForImage", fields: [pageVersionImageId], references: [id], onDelete: Cascade)

  @@index([status, nextRunAt])
  @@index([lockedAt])
}

model PageMetricWatch {
  id             Int                     @id @default(autoincrement())
  pageId         Int
  userId         Int
  metric         PageMetricType
  thresholdType  PageMetricThresholdType @default(ANY_CHANGE)
  thresholdValue Float?
  lastObserved   Float?
  source         String
  mutedAt        DateTime?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  config         Json?
  alerts         PageMetricAlert[]
  page           Page                    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId, metric, source], map: "uniq_watch_owner_metric_source")
  @@index([userId, metric], map: "idx_watch_user_metric")
  @@index([pageId, metric], map: "idx_watch_page_metric")
}

model PageMetricAlert {
  id             Int             @id @default(autoincrement())
  watchId        Int
  pageId         Int
  metric         PageMetricType
  prevValue      Float?
  newValue       Float?
  diffValue      Float?
  detectedAt     DateTime        @default(now())
  acknowledgedAt DateTime?
  createdAt      DateTime        @default(now())
  watch          PageMetricWatch @relation(fields: [watchId], references: [id], onDelete: Cascade)
  page           Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([watchId, detectedAt], map: "idx_alert_watch_detected_at")
  @@index([pageId, metric], map: "idx_alert_page_metric")
  @@index([metric, detectedAt], map: "idx_alert_metric_detected_at")
}

model Revision {
  id             Int             @id @default(autoincrement())
  pageVersionId  Int
  wikidotId      Int
  timestamp      DateTime
  type           String
  comment        String?
  userId         Int?
  pageVersion    PageVersion     @relation(fields: [pageVersionId], references: [id])
  user           User?           @relation(fields: [userId], references: [id])
  sourceVersions SourceVersion[]

  @@unique([pageVersionId, wikidotId])
  @@index([pageVersionId])
  @@index([pageVersionId, timestamp], map: "idx_rev_pv_ts")
  @@index([userId])
  @@index([timestamp])
}

model SeriesStats {
  id              Int      @id @default(autoincrement())
  seriesNumber    Int      @unique
  isOpen          Boolean  @default(false)
  totalSlots      Int
  usedSlots       Int      @default(0)
  usagePercentage Float    @default(0.0)
  milestonePageId Int?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([isOpen])
  @@index([seriesNumber])
  @@index([usagePercentage])
}

model SiteStats {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique @db.Date
  totalUsers    Int      @default(0)
  activeUsers   Int      @default(0)
  totalPages    Int      @default(0)
  totalVotes    Int      @default(0)
  newUsersToday Int      @default(0)
  newPagesToday Int      @default(0)
  newVotesToday Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([date])
}

model SourceVersion {
  id             Int         @id @default(autoincrement())
  pageVersionId  Int
  revisionId     Int?
  revisionNumber Int?
  source         String?
  textContent    String?
  timestamp      DateTime    @default(now())
  isLatest       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  pageVersion    PageVersion @relation(fields: [pageVersionId], references: [id])
  revision       Revision?   @relation(fields: [revisionId], references: [id])

  @@unique([pageVersionId, revisionNumber])
  @@index([pageVersionId, isLatest])
  @@index([pageVersionId, timestamp])
  @@index([revisionNumber])
  @@index([timestamp])
}

model User {
  id                               Int                   @id @default(autoincrement())
  wikidotId                        Int?                  @unique
  displayName                      String?
  firstActivityAt                  DateTime?
  firstActivityType                String?
  firstActivityDetails             String?
  lastActivityAt                   DateTime?
  attributionVotingTimeSeriesCache Json?
  attributionVotingCacheUpdatedAt  DateTime?
  username                         String?
  isGuest                          Boolean?
  attributions                     Attribution[]
  interestingFacts                 InterestingFacts[]
  revisions                        Revision[]
  tagRecords                       TagRecords[]
  userActivityRecords              UserActivityRecords[]
  userDailyStats                   UserDailyStats[]
  stats                            UserStats?
  votes                            Vote[]
  metricWatches                    PageMetricWatch[]
  metricPreferences                UserMetricPreference[]

  @@index([firstActivityAt])
  @@index([firstActivityType])
  @@index([lastActivityAt])
  @@index([attributionVotingCacheUpdatedAt])
}

model UserMetricPreference {
  id        Int            @id @default(autoincrement())
  userId    Int
  metric    PageMetricType
  config    Json?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, metric], map: "uniq_user_metric_preference")
}

model UserStats {
  id                   Int       @id @default(autoincrement())
  userId               Int       @unique
  totalUp              Int
  totalDown            Int
  totalRating          Int
  favTag               String?
  goiPageCount         Int       @default(0)
  goiRank              Int?
  goiRating            Decimal?  @default(0) @db.Decimal(10, 2)
  overallRank          Int?
  overallRating        Decimal?  @default(0) @db.Decimal(10, 2)
  pageCount            Int       @default(0)
  ratingUpdatedAt      DateTime? @default(now())
  scpPageCount         Int       @default(0)
  scpRank              Int?
  scpRating            Decimal?  @default(0) @db.Decimal(10, 2)
  storyPageCount       Int       @default(0)
  storyRank            Int?
  storyRating          Decimal?  @default(0) @db.Decimal(10, 2)
  translationPageCount Int       @default(0)
  translationRank      Int?
  translationRating    Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRating      Decimal?  @default(0) @db.Decimal(10, 2)
  wanderersRank        Int?
  wanderersPageCount   Int       @default(0)
  artRating            Decimal?  @default(0) @db.Decimal(10, 2)
  artRank              Int?
  artPageCount         Int       @default(0)
  user                 User      @relation(fields: [userId], references: [id])

  @@index([overallRating(sort: Desc)], map: "idx_userstats_overall_rating")
  @@index([overallRank], map: "idx_userstats_overall_rank")
  @@index([scpRating(sort: Desc)], map: "idx_userstats_scp_rating")
  @@index([scpRank], map: "idx_userstats_scp_rank")
  @@index([translationRating(sort: Desc)], map: "idx_userstats_translation_rating")
  @@index([translationRank], map: "idx_userstats_translation_rank")
  @@index([goiRating(sort: Desc)], map: "idx_userstats_goi_rating")
  @@index([goiRank], map: "idx_userstats_goi_rank")
  @@index([storyRating(sort: Desc)], map: "idx_userstats_story_rating")
  @@index([storyRank], map: "idx_userstats_story_rank")
  @@index([wanderersRating(sort: Desc)], map: "idx_userstats_wanderers_rating")
  @@index([wanderersRank], map: "idx_userstats_wanderers_rank")
  @@index([artRating(sort: Desc)], map: "idx_userstats_art_rating")
  @@index([artRank], map: "idx_userstats_art_rank")
}

model UserTagPreference {
  userId        Int
  tag           String
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())

  @@unique([userId, tag])
}

model UserVoteInteraction {
  fromUserId    Int
  toUserId      Int
  upvoteCount   Int       @default(0)
  downvoteCount Int       @default(0)
  totalVotes    Int       @default(0)
  lastVoteAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            Int       @id @default(autoincrement())

  @@unique([fromUserId, toUserId])
}

model Vote {
  id            Int         @id @default(autoincrement())
  pageVersionId Int
  timestamp     DateTime
  direction     Int
  userId        Int?
  anonKey       String?
  pageVersion   PageVersion @relation(fields: [pageVersionId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])

  @@unique([pageVersionId, userId, timestamp], name: "Vote_unique_constraint")
  @@unique([pageVersionId, anonKey, timestamp], name: "Vote_anon_unique_constraint")
  @@index([pageVersionId, direction])
  @@index([pageVersionId, timestamp], map: "idx_vote_pv_ts")
  @@index([userId])
}

model InterestingFacts {
  id           Int       @id @default(autoincrement())
  category     String
  type         String
  title        String
  description  String?
  value        String?
  metadata     Json?
  pageId       Int?
  userId       Int?
  dateContext  DateTime? @db.Date
  tagContext   String?
  rank         Int       @default(1)
  calculatedAt DateTime  @default(now())
  isActive     Boolean   @default(true)
  page         Page?     @relation(fields: [pageId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@unique([category, type, dateContext, tagContext, rank])
  @@index([category, type])
  @@index([calculatedAt])
  @@index([isActive])
}

model TimeMilestones {
  id            Int       @id @default(autoincrement())
  period        String
  periodValue   String
  milestoneType String
  pageId        Int
  pageTitle     String?
  pageRating    Int?
  pageCreatedAt DateTime?
  calculatedAt  DateTime  @default(now())
  page          Page      @relation(fields: [pageId], references: [id])

  @@unique([period, periodValue, milestoneType])
  @@index([period, periodValue])
  @@index([milestoneType])
  @@index([pageId])
}

model TagRecords {
  id           Int      @id @default(autoincrement())
  tag          String
  recordType   String
  pageId       Int?
  userId       Int?
  value        Decimal?
  metadata     Json?
  calculatedAt DateTime @default(now())
  page         Page?    @relation(fields: [pageId], references: [id])
  user         User?    @relation(fields: [userId], references: [id])

  @@unique([tag, recordType])
  @@index([tag])
  @@index([recordType])
}

model ContentRecords {
  id            Int      @id @default(autoincrement())
  recordType    String
  pageId        Int
  pageTitle     String?
  sourceLength  Int?
  contentLength Int?
  complexity    Json?
  calculatedAt  DateTime @default(now())
  page          Page     @relation(fields: [pageId], references: [id])

  @@unique([recordType, pageId])
  @@index([recordType])
  @@index([sourceLength])
}

model RatingRecords {
  id           Int       @id @default(autoincrement())
  recordType   String
  pageId       Int
  pageTitle    String?
  rating       Int?
  voteCount    Int?
  controversy  Float?
  wilson95     Float?
  timeframe    String?
  value        Decimal?
  achievedAt   DateTime?
  calculatedAt DateTime  @default(now())
  page         Page      @relation(fields: [pageId], references: [id])

  @@unique([recordType, timeframe, pageId])
  @@index([recordType, timeframe])
  @@index([rating])
}

model UserActivityRecords {
  id              Int       @id @default(autoincrement())
  recordType      String
  userId          Int
  userDisplayName String?
  value           Decimal?
  achievedAt      DateTime?
  context         Json?
  calculatedAt    DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id])

  @@unique([recordType, userId])
  @@index([recordType])
  @@index([achievedAt])
}

model TrendingStats {
  id           Int      @id @default(autoincrement())
  statType     String
  name         String
  entityId     Int?
  entityType   String?
  score        Decimal
  period       String
  metadata     Json?
  calculatedAt DateTime @default(now())

  @@unique([statType, period, entityId, entityType])
  @@index([statType, period])
  @@index([score])
}

model AnalysisWatermark {
  id        Int       @id @default(autoincrement())
  task      String    @unique
  lastRunAt DateTime  @default(now())
  cursorTs  DateTime?
}

model PageDailyStats {
  id           Int      @id @default(autoincrement())
  pageId       Int
  date         DateTime @db.Date
  votesUp      Int      @default(0) @map("votes_up")
  votesDown    Int      @default(0) @map("votes_down")
  totalVotes   Int      @default(0) @map("total_votes")
  uniqueVoters Int      @default(0) @map("unique_voters")
  revisions    Int      @default(0)
  createdAt    DateTime @default(now())
  page         Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, date])
  @@index([date])
  @@index([pageId])
}

model UserDailyStats {
  id           Int       @id @default(autoincrement())
  userId       Int
  date         DateTime  @db.Date
  votesCast    Int       @default(0) @map("votes_cast")
  pagesCreated Int       @default(0) @map("pages_created")
  lastActivity DateTime? @map("last_activity")
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
  @@index([userId])
}

model LeaderboardCache {
  id        Int       @id @default(autoincrement())
  key       String
  period    String
  payload   Json
  updatedAt DateTime  @default(now())
  expiresAt DateTime?

  @@unique([key, period])
  @@index([key, period])
  @@index([expiresAt])
}

/// Daily site-wide overview snapshot (non-destructive addition)
model SiteOverviewDaily {
  id                 Int      @id @default(autoincrement())
  date               DateTime @unique @db.Date
  // Users
  usersTotal         Int      @default(0)
  usersActive        Int      @default(0)
  usersContributors  Int      @default(0)
  usersAuthors       Int      @default(0)
  // Pages
  pagesTotal         Int      @default(0)
  pagesOriginals     Int      @default(0)
  pagesTranslations  Int      @default(0)
  // Votes (daily increments)
  votesUp            Int      @default(0)
  votesDown          Int      @default(0)
  // Revisions (daily increments)
  revisionsTotal     Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([date])
}
