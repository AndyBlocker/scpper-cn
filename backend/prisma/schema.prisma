generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Page {
  id        Int           @id @default(autoincrement())  
  url       String        @unique
  urlKey    String
  versions  PageVersion[]
  dirtyPage DirtyPage?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PageVersion {
  id            Int            @id @default(autoincrement())
  pageId        Int
  wikidotId     Int?
  title         String?
  rating        Int?
  voteCount     Int?
  revisionCount Int?
  textContent   String?
  source        String?
  tags          String[]
  validFrom     DateTime
  validTo       DateTime?
  isDeleted     Boolean        @default(false)

  revisions     Revision[]
  votes         Vote[]
  attributions  Attribution[]
  stats         PageStats?
  
  page          Page           @relation(fields: [pageId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([pageId])
  @@index([validTo])
  @@index([rating])
  @@index([wikidotId])
}

model Revision {
  id            Int            @id @default(autoincrement())
  pageVersionId Int
  wikidotId     Int
  timestamp     DateTime
  type          String
  comment       String?
  userId        Int?
  
  pageVersion   PageVersion    @relation(fields: [pageVersionId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  
  @@unique([pageVersionId, wikidotId])
  @@index([pageVersionId])
  @@index([pageVersionId, timestamp])
  @@index([userId])
  @@index([timestamp])
}

model Vote {
  id            Int            @id @default(autoincrement())
  pageVersionId Int
  timestamp     DateTime
  direction     Int
  userId        Int?
  anonKey       String?        // For anonymous votes when userId is null
  
  pageVersion   PageVersion    @relation(fields: [pageVersionId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  
  // Fixed unique constraint that handles NULL userId properly
  @@unique([pageVersionId, userId, timestamp], name: "Vote_unique_constraint")
  @@unique([pageVersionId, anonKey, timestamp], name: "Vote_anon_unique_constraint")
  @@index([pageVersionId, direction])
  @@index([pageVersionId, timestamp])
  @@index([userId])
}

model User {
  id            Int            @id @default(autoincrement())
  wikidotId     Int?           @unique
  displayName   String?
  firstActivityAt DateTime?
  firstActivityType String?    // "VOTE", "REVISION", "ATTRIBUTION"
  firstActivityDetails String? // 活动详情描述
  votes         Vote[]
  revisions     Revision[]
  attributions  Attribution[]
  stats         UserStats?
  voteInteractionsFrom UserVoteInteraction[] @relation("VoteInteractionFrom")
  voteInteractionsTo   UserVoteInteraction[] @relation("VoteInteractionTo")
  tagPreferences       UserTagPreference[]
  
  @@index([firstActivityAt])
  @@index([firstActivityType])
}

model PageStats {
  id              Int   @id @default(autoincrement())
  pageVersionId   Int   @unique
  uv              Int
  dv              Int
  wilson95        Float
  controversy     Float
  likeRatio       Float
  
  pageVersion     PageVersion @relation(fields: [pageVersionId], references: [id])
}

model UserStats {
  id            Int  @id @default(autoincrement())
  userId        Int  @unique
  totalUp       Int
  totalDown     Int
  totalRating   Int
  favTag        String?
  
  // User Rating and Ranking System
  overallRating      Decimal?  @db.Decimal(10, 2) @default(0)
  overallRank        Int?
  pageCount          Int       @default(0)
  
  // SCP Category (原创 + scp)
  scpRating          Decimal?  @db.Decimal(10, 2) @default(0)
  scpRank            Int?
  scpPageCount       Int       @default(0)
  
  // Translation Category (翻译)
  translationRating  Decimal?  @db.Decimal(10, 2) @default(0)
  translationRank    Int?
  translationPageCount Int     @default(0)
  
  // GOI Category (原创 + goi格式)
  goiRating          Decimal?  @db.Decimal(10, 2) @default(0)
  goiRank            Int?
  goiPageCount       Int       @default(0)
  
  // Story Category (原创 + 故事)
  storyRating        Decimal?  @db.Decimal(10, 2) @default(0)
  storyRank          Int?
  storyPageCount     Int       @default(0)
  
  ratingUpdatedAt    DateTime? @default(now())
  
  user          User @relation(fields: [userId], references: [id])
  
  @@index([overallRating(sort: Desc)])
  @@index([overallRank(sort: Asc)])
  @@index([scpRating(sort: Desc)])
  @@index([scpRank(sort: Asc)])
  @@index([translationRating(sort: Desc)])
  @@index([translationRank(sort: Asc)])
  @@index([goiRating(sort: Desc)])
  @@index([goiRank(sort: Asc)])
  @@index([storyRating(sort: Desc)])
  @@index([storyRank(sort: Asc)])
}

model Attribution {
  id        Int      @id @default(autoincrement())
  pageVerId Int
  type      String
  order     Int      @default(0)  // 改为非空，默认值0
  date      DateTime?
  userId    Int?
  anonKey   String?

  pageVersion PageVersion @relation(fields: [pageVerId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  // 简化 unique constraints，避免包含可空字段
  @@unique([pageVerId, type, order, userId], name: "Attribution_unique_constraint") 
  @@unique([pageVerId, type, order, anonKey], name: "Attribution_anon_unique_constraint")
  @@index([pageVerId])
  @@index([userId])
}

// New tables for improved incremental sync architecture
model PageMetaStaging {
  url           String    @id
  wikidotId     Int?
  title         String?
  rating        Int?
  voteCount     Int?
  revisionCount Int?
  tags          String[]
  isDeleted     Boolean   @default(false)
  estimatedCost Int?
  lastSeenAt    DateTime  @default(now())
  
  // New fields for enhanced dirty detection
  category         String?
  parentUrl        String?
  childCount       Int?
  attributionCount Int?
  voteUp           Int?
  voteDown         Int?
  
  @@index([lastSeenAt])
}

model DirtyPage {
  pageId      Int       @id
  needPhaseB  Boolean
  needPhaseC  Boolean
  reasons     String[]
  donePhaseB  Boolean   @default(false)
  donePhaseC  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  @@index([needPhaseB, donePhaseB])
  @@index([needPhaseC, donePhaseC])
}

model UserVoteInteraction {
  id           Int      @id @default(autoincrement())
  fromUserId   Int
  toUserId     Int
  upvoteCount  Int      @default(0)
  downvoteCount Int     @default(0)
  totalVotes   Int      @default(0)
  lastVoteAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  fromUser     User     @relation("VoteInteractionFrom", fields: [fromUserId], references: [id])
  toUser       User     @relation("VoteInteractionTo", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([totalVotes])
}

model UserTagPreference {
  id           Int      @id @default(autoincrement())
  userId       Int
  tag          String
  upvoteCount  Int      @default(0)
  downvoteCount Int     @default(0)
  totalVotes   Int      @default(0)
  lastVoteAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, tag])
  @@index([userId])
  @@index([tag])
  @@index([totalVotes])
}

model SiteStats {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique @db.Date
  totalUsers  Int      @default(0)
  activeUsers Int      @default(0)  // Users with firstActivityAt
  totalPages  Int      @default(0)
  totalVotes  Int      @default(0)
  newUsersToday Int    @default(0)  // New users by firstActivityAt on this date
  newPagesToday Int    @default(0)  // New pages created on this date
  newVotesToday Int    @default(0)  // New votes on this date
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date])
}

model SeriesStats {
  id             Int      @id @default(autoincrement())
  seriesNumber   Int      @unique
  isOpen         Boolean  @default(false)
  totalSlots     Int      // 999 for series 1, 1000 for others
  usedSlots      Int      @default(0)
  usagePercentage Float   @default(0.0)
  milestonePageId Int?     // The scp-cn-x000 page that opened this series
  lastUpdated    DateTime @default(now())
  createdAt      DateTime @default(now())

  @@index([seriesNumber])
  @@index([isOpen])
  @@index([usagePercentage])
}
